// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.20.0
// source: project/v1/project.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationProjectCreateProject = "/api.project.v1.Project/CreateProject"
const OperationProjectDeleteProject = "/api.project.v1.Project/DeleteProject"
const OperationProjectDeleteProjectTag = "/api.project.v1.Project/DeleteProjectTag"
const OperationProjectDeleteProjectUser = "/api.project.v1.Project/DeleteProjectUser"
const OperationProjectGetProject = "/api.project.v1.Project/GetProject"
const OperationProjectGetProjectState = "/api.project.v1.Project/GetProjectState"
const OperationProjectGetProjectTag = "/api.project.v1.Project/GetProjectTag"
const OperationProjectGetProjectUser = "/api.project.v1.Project/GetProjectUser"
const OperationProjectListProject = "/api.project.v1.Project/ListProject"
const OperationProjectUpdateProject = "/api.project.v1.Project/UpdateProject"
const OperationProjectUpdateProjectTag = "/api.project.v1.Project/UpdateProjectTag"
const OperationProjectUpdateProjectUser = "/api.project.v1.Project/UpdateProjectUser"

type ProjectHTTPServer interface {
	CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectReply, error)
	DeleteProject(context.Context, *DeleteProjectRequest) (*DeleteProjectReply, error)
	DeleteProjectTag(context.Context, *DeleteProjectTagRequest) (*DeleteProjectTagReply, error)
	DeleteProjectUser(context.Context, *DeleteProjectUserRequest) (*DeleteProjectUserReply, error)
	GetProject(context.Context, *GetProjectRequest) (*GetProjectReply, error)
	GetProjectState(context.Context, *GetProjectStateRequest) (*GetProjectStateReply, error)
	GetProjectTag(context.Context, *GetProjectTagRequest) (*GetProjectTagReply, error)
	GetProjectUser(context.Context, *GetProjectUserRequest) (*GetProjectUserReply, error)
	ListProject(context.Context, *ListProjectRequest) (*ListProjectReply, error)
	UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectReply, error)
	UpdateProjectTag(context.Context, *UpdateProjectTagRequest) (*UpdateProjectTagReply, error)
	UpdateProjectUser(context.Context, *UpdateProjectUserRequest) (*UpdateProjectUserReply, error)
}

func RegisterProjectHTTPServer(s *http.Server, srv ProjectHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/project/create", _Project_CreateProject0_HTTP_Handler(srv))
	r.POST("/api/v1/project/update", _Project_UpdateProject0_HTTP_Handler(srv))
	r.POST("/api/v1/project/delete", _Project_DeleteProject0_HTTP_Handler(srv))
	r.POST("/api/v1/project/get", _Project_GetProject0_HTTP_Handler(srv))
	r.POST("/api/v1/project/list", _Project_ListProject0_HTTP_Handler(srv))
	r.POST("/api/v1/project/user/delete", _Project_DeleteProjectUser0_HTTP_Handler(srv))
	r.POST("/api/v1/project/tag/delete", _Project_DeleteProjectTag0_HTTP_Handler(srv))
	r.POST("/api/v1/project/state", _Project_GetProjectState0_HTTP_Handler(srv))
	r.POST("/api/v1/project/user/get", _Project_GetProjectUser0_HTTP_Handler(srv))
	r.POST("/api/v1/project/user/update", _Project_UpdateProjectUser0_HTTP_Handler(srv))
	r.POST("/api/v1/project/tag/update", _Project_UpdateProjectTag0_HTTP_Handler(srv))
	r.POST("/api/v1/project/tag/get", _Project_GetProjectTag0_HTTP_Handler(srv))
}

func _Project_CreateProject0_HTTP_Handler(srv ProjectHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateProjectRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProjectCreateProject)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateProject(ctx, req.(*CreateProjectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateProjectReply)
		return ctx.Result(200, reply)
	}
}

func _Project_UpdateProject0_HTTP_Handler(srv ProjectHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateProjectRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProjectUpdateProject)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateProject(ctx, req.(*UpdateProjectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateProjectReply)
		return ctx.Result(200, reply)
	}
}

func _Project_DeleteProject0_HTTP_Handler(srv ProjectHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteProjectRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProjectDeleteProject)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteProject(ctx, req.(*DeleteProjectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteProjectReply)
		return ctx.Result(200, reply)
	}
}

func _Project_GetProject0_HTTP_Handler(srv ProjectHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetProjectRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProjectGetProject)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProject(ctx, req.(*GetProjectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetProjectReply)
		return ctx.Result(200, reply)
	}
}

func _Project_ListProject0_HTTP_Handler(srv ProjectHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListProjectRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProjectListProject)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListProject(ctx, req.(*ListProjectRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListProjectReply)
		return ctx.Result(200, reply)
	}
}

func _Project_DeleteProjectUser0_HTTP_Handler(srv ProjectHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteProjectUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProjectDeleteProjectUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteProjectUser(ctx, req.(*DeleteProjectUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteProjectUserReply)
		return ctx.Result(200, reply)
	}
}

func _Project_DeleteProjectTag0_HTTP_Handler(srv ProjectHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteProjectTagRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProjectDeleteProjectTag)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteProjectTag(ctx, req.(*DeleteProjectTagRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteProjectTagReply)
		return ctx.Result(200, reply)
	}
}

func _Project_GetProjectState0_HTTP_Handler(srv ProjectHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetProjectStateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProjectGetProjectState)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProjectState(ctx, req.(*GetProjectStateRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetProjectStateReply)
		return ctx.Result(200, reply)
	}
}

func _Project_GetProjectUser0_HTTP_Handler(srv ProjectHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetProjectUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProjectGetProjectUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProjectUser(ctx, req.(*GetProjectUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetProjectUserReply)
		return ctx.Result(200, reply)
	}
}

func _Project_UpdateProjectUser0_HTTP_Handler(srv ProjectHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateProjectUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProjectUpdateProjectUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateProjectUser(ctx, req.(*UpdateProjectUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateProjectUserReply)
		return ctx.Result(200, reply)
	}
}

func _Project_UpdateProjectTag0_HTTP_Handler(srv ProjectHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateProjectTagRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProjectUpdateProjectTag)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateProjectTag(ctx, req.(*UpdateProjectTagRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateProjectTagReply)
		return ctx.Result(200, reply)
	}
}

func _Project_GetProjectTag0_HTTP_Handler(srv ProjectHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetProjectTagRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProjectGetProjectTag)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProjectTag(ctx, req.(*GetProjectTagRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetProjectTagReply)
		return ctx.Result(200, reply)
	}
}

type ProjectHTTPClient interface {
	CreateProject(ctx context.Context, req *CreateProjectRequest, opts ...http.CallOption) (rsp *CreateProjectReply, err error)
	DeleteProject(ctx context.Context, req *DeleteProjectRequest, opts ...http.CallOption) (rsp *DeleteProjectReply, err error)
	DeleteProjectTag(ctx context.Context, req *DeleteProjectTagRequest, opts ...http.CallOption) (rsp *DeleteProjectTagReply, err error)
	DeleteProjectUser(ctx context.Context, req *DeleteProjectUserRequest, opts ...http.CallOption) (rsp *DeleteProjectUserReply, err error)
	GetProject(ctx context.Context, req *GetProjectRequest, opts ...http.CallOption) (rsp *GetProjectReply, err error)
	GetProjectState(ctx context.Context, req *GetProjectStateRequest, opts ...http.CallOption) (rsp *GetProjectStateReply, err error)
	GetProjectTag(ctx context.Context, req *GetProjectTagRequest, opts ...http.CallOption) (rsp *GetProjectTagReply, err error)
	GetProjectUser(ctx context.Context, req *GetProjectUserRequest, opts ...http.CallOption) (rsp *GetProjectUserReply, err error)
	ListProject(ctx context.Context, req *ListProjectRequest, opts ...http.CallOption) (rsp *ListProjectReply, err error)
	UpdateProject(ctx context.Context, req *UpdateProjectRequest, opts ...http.CallOption) (rsp *UpdateProjectReply, err error)
	UpdateProjectTag(ctx context.Context, req *UpdateProjectTagRequest, opts ...http.CallOption) (rsp *UpdateProjectTagReply, err error)
	UpdateProjectUser(ctx context.Context, req *UpdateProjectUserRequest, opts ...http.CallOption) (rsp *UpdateProjectUserReply, err error)
}

type ProjectHTTPClientImpl struct {
	cc *http.Client
}

func NewProjectHTTPClient(client *http.Client) ProjectHTTPClient {
	return &ProjectHTTPClientImpl{client}
}

func (c *ProjectHTTPClientImpl) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...http.CallOption) (*CreateProjectReply, error) {
	var out CreateProjectReply
	pattern := "/api/v1/project/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProjectCreateProject))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProjectHTTPClientImpl) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...http.CallOption) (*DeleteProjectReply, error) {
	var out DeleteProjectReply
	pattern := "/api/v1/project/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProjectDeleteProject))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProjectHTTPClientImpl) DeleteProjectTag(ctx context.Context, in *DeleteProjectTagRequest, opts ...http.CallOption) (*DeleteProjectTagReply, error) {
	var out DeleteProjectTagReply
	pattern := "/api/v1/project/tag/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProjectDeleteProjectTag))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProjectHTTPClientImpl) DeleteProjectUser(ctx context.Context, in *DeleteProjectUserRequest, opts ...http.CallOption) (*DeleteProjectUserReply, error) {
	var out DeleteProjectUserReply
	pattern := "/api/v1/project/user/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProjectDeleteProjectUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProjectHTTPClientImpl) GetProject(ctx context.Context, in *GetProjectRequest, opts ...http.CallOption) (*GetProjectReply, error) {
	var out GetProjectReply
	pattern := "/api/v1/project/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProjectGetProject))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProjectHTTPClientImpl) GetProjectState(ctx context.Context, in *GetProjectStateRequest, opts ...http.CallOption) (*GetProjectStateReply, error) {
	var out GetProjectStateReply
	pattern := "/api/v1/project/state"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProjectGetProjectState))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProjectHTTPClientImpl) GetProjectTag(ctx context.Context, in *GetProjectTagRequest, opts ...http.CallOption) (*GetProjectTagReply, error) {
	var out GetProjectTagReply
	pattern := "/api/v1/project/tag/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProjectGetProjectTag))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProjectHTTPClientImpl) GetProjectUser(ctx context.Context, in *GetProjectUserRequest, opts ...http.CallOption) (*GetProjectUserReply, error) {
	var out GetProjectUserReply
	pattern := "/api/v1/project/user/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProjectGetProjectUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProjectHTTPClientImpl) ListProject(ctx context.Context, in *ListProjectRequest, opts ...http.CallOption) (*ListProjectReply, error) {
	var out ListProjectReply
	pattern := "/api/v1/project/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProjectListProject))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProjectHTTPClientImpl) UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...http.CallOption) (*UpdateProjectReply, error) {
	var out UpdateProjectReply
	pattern := "/api/v1/project/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProjectUpdateProject))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProjectHTTPClientImpl) UpdateProjectTag(ctx context.Context, in *UpdateProjectTagRequest, opts ...http.CallOption) (*UpdateProjectTagReply, error) {
	var out UpdateProjectTagReply
	pattern := "/api/v1/project/tag/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProjectUpdateProjectTag))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProjectHTTPClientImpl) UpdateProjectUser(ctx context.Context, in *UpdateProjectUserRequest, opts ...http.CallOption) (*UpdateProjectUserReply, error) {
	var out UpdateProjectUserReply
	pattern := "/api/v1/project/user/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationProjectUpdateProjectUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
