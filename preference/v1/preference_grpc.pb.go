// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: preference/v1/preference.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PreferenceClient is the client API for Preference service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PreferenceClient interface {
	UpdatePreference(ctx context.Context, in *UpdatePreferenceRequest, opts ...grpc.CallOption) (*UpdatePreferenceReply, error)
	GetPreference(ctx context.Context, in *GetPreferenceRequest, opts ...grpc.CallOption) (*GetPreferenceReply, error)
	UpdateTagPreference(ctx context.Context, in *UpdateTagPreferenceRequest, opts ...grpc.CallOption) (*UpdateTagPreferenceReply, error)
	GetTagPreference(ctx context.Context, in *GetTagPreferenceRequest, opts ...grpc.CallOption) (*GetTagPreferenceReply, error)
}

type preferenceClient struct {
	cc grpc.ClientConnInterface
}

func NewPreferenceClient(cc grpc.ClientConnInterface) PreferenceClient {
	return &preferenceClient{cc}
}

func (c *preferenceClient) UpdatePreference(ctx context.Context, in *UpdatePreferenceRequest, opts ...grpc.CallOption) (*UpdatePreferenceReply, error) {
	out := new(UpdatePreferenceReply)
	err := c.cc.Invoke(ctx, "/api.preference.v1.Preference/UpdatePreference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *preferenceClient) GetPreference(ctx context.Context, in *GetPreferenceRequest, opts ...grpc.CallOption) (*GetPreferenceReply, error) {
	out := new(GetPreferenceReply)
	err := c.cc.Invoke(ctx, "/api.preference.v1.Preference/GetPreference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *preferenceClient) UpdateTagPreference(ctx context.Context, in *UpdateTagPreferenceRequest, opts ...grpc.CallOption) (*UpdateTagPreferenceReply, error) {
	out := new(UpdateTagPreferenceReply)
	err := c.cc.Invoke(ctx, "/api.preference.v1.Preference/UpdateTagPreference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *preferenceClient) GetTagPreference(ctx context.Context, in *GetTagPreferenceRequest, opts ...grpc.CallOption) (*GetTagPreferenceReply, error) {
	out := new(GetTagPreferenceReply)
	err := c.cc.Invoke(ctx, "/api.preference.v1.Preference/GetTagPreference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PreferenceServer is the server API for Preference service.
// All implementations must embed UnimplementedPreferenceServer
// for forward compatibility
type PreferenceServer interface {
	UpdatePreference(context.Context, *UpdatePreferenceRequest) (*UpdatePreferenceReply, error)
	GetPreference(context.Context, *GetPreferenceRequest) (*GetPreferenceReply, error)
	UpdateTagPreference(context.Context, *UpdateTagPreferenceRequest) (*UpdateTagPreferenceReply, error)
	GetTagPreference(context.Context, *GetTagPreferenceRequest) (*GetTagPreferenceReply, error)
	mustEmbedUnimplementedPreferenceServer()
}

// UnimplementedPreferenceServer must be embedded to have forward compatible implementations.
type UnimplementedPreferenceServer struct {
}

func (UnimplementedPreferenceServer) UpdatePreference(context.Context, *UpdatePreferenceRequest) (*UpdatePreferenceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePreference not implemented")
}
func (UnimplementedPreferenceServer) GetPreference(context.Context, *GetPreferenceRequest) (*GetPreferenceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPreference not implemented")
}
func (UnimplementedPreferenceServer) UpdateTagPreference(context.Context, *UpdateTagPreferenceRequest) (*UpdateTagPreferenceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTagPreference not implemented")
}
func (UnimplementedPreferenceServer) GetTagPreference(context.Context, *GetTagPreferenceRequest) (*GetTagPreferenceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagPreference not implemented")
}
func (UnimplementedPreferenceServer) mustEmbedUnimplementedPreferenceServer() {}

// UnsafePreferenceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PreferenceServer will
// result in compilation errors.
type UnsafePreferenceServer interface {
	mustEmbedUnimplementedPreferenceServer()
}

func RegisterPreferenceServer(s grpc.ServiceRegistrar, srv PreferenceServer) {
	s.RegisterService(&Preference_ServiceDesc, srv)
}

func _Preference_UpdatePreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePreferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PreferenceServer).UpdatePreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.preference.v1.Preference/UpdatePreference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PreferenceServer).UpdatePreference(ctx, req.(*UpdatePreferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Preference_GetPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPreferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PreferenceServer).GetPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.preference.v1.Preference/GetPreference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PreferenceServer).GetPreference(ctx, req.(*GetPreferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Preference_UpdateTagPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagPreferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PreferenceServer).UpdateTagPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.preference.v1.Preference/UpdateTagPreference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PreferenceServer).UpdateTagPreference(ctx, req.(*UpdateTagPreferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Preference_GetTagPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagPreferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PreferenceServer).GetTagPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.preference.v1.Preference/GetTagPreference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PreferenceServer).GetTagPreference(ctx, req.(*GetTagPreferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Preference_ServiceDesc is the grpc.ServiceDesc for Preference service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Preference_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.preference.v1.Preference",
	HandlerType: (*PreferenceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdatePreference",
			Handler:    _Preference_UpdatePreference_Handler,
		},
		{
			MethodName: "GetPreference",
			Handler:    _Preference_GetPreference_Handler,
		},
		{
			MethodName: "UpdateTagPreference",
			Handler:    _Preference_UpdateTagPreference_Handler,
		},
		{
			MethodName: "GetTagPreference",
			Handler:    _Preference_GetTagPreference_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "preference/v1/preference.proto",
}
