// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/user/v1/user.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on CreateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateUserRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateUserRequestValidationError is the validation error returned by
// CreateUserRequest.Validate if the designated constraints aren't met.
type CreateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRequestValidationError) ErrorName() string {
	return "CreateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRequestValidationError{}

// Validate checks the field values on CreateUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateUserReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateUserReplyValidationError is the validation error returned by
// CreateUserReply.Validate if the designated constraints aren't met.
type CreateUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserReplyValidationError) ErrorName() string { return "CreateUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserReplyValidationError{}

// Validate checks the field values on UpdateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateUserRequestValidationError is the validation error returned by
// UpdateUserRequest.Validate if the designated constraints aren't met.
type UpdateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRequestValidationError) ErrorName() string {
	return "UpdateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRequestValidationError{}

// Validate checks the field values on UpdateUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateUserReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateUserReplyValidationError is the validation error returned by
// UpdateUserReply.Validate if the designated constraints aren't met.
type UpdateUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserReplyValidationError) ErrorName() string { return "UpdateUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdateUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserReplyValidationError{}

// Validate checks the field values on UpdatePwdRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdatePwdRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Password

	return nil
}

// UpdatePwdRequestValidationError is the validation error returned by
// UpdatePwdRequest.Validate if the designated constraints aren't met.
type UpdatePwdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePwdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePwdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePwdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePwdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePwdRequestValidationError) ErrorName() string { return "UpdatePwdRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdatePwdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePwdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePwdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePwdRequestValidationError{}

// Validate checks the field values on UpdatePwdReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UpdatePwdReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdatePwdReplyValidationError is the validation error returned by
// UpdatePwdReply.Validate if the designated constraints aren't met.
type UpdatePwdReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePwdReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePwdReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePwdReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePwdReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePwdReplyValidationError) ErrorName() string { return "UpdatePwdReplyValidationError" }

// Error satisfies the builtin error interface
func (e UpdatePwdReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePwdReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePwdReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePwdReplyValidationError{}

// Validate checks the field values on UpdateStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateStatusRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Status

	return nil
}

// UpdateStatusRequestValidationError is the validation error returned by
// UpdateStatusRequest.Validate if the designated constraints aren't met.
type UpdateStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStatusRequestValidationError) ErrorName() string {
	return "UpdateStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStatusRequestValidationError{}

// Validate checks the field values on UpdateStatusReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateStatusReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateStatusReplyValidationError is the validation error returned by
// UpdateStatusReply.Validate if the designated constraints aren't met.
type UpdateStatusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateStatusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateStatusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateStatusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateStatusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateStatusReplyValidationError) ErrorName() string {
	return "UpdateStatusReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateStatusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateStatusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateStatusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateStatusReplyValidationError{}

// Validate checks the field values on DeleteUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteUserRequestValidationError is the validation error returned by
// DeleteUserRequest.Validate if the designated constraints aren't met.
type DeleteUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserRequestValidationError) ErrorName() string {
	return "DeleteUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserRequestValidationError{}

// Validate checks the field values on DeleteUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteUserReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteUserReplyValidationError is the validation error returned by
// DeleteUserReply.Validate if the designated constraints aren't met.
type DeleteUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserReplyValidationError) ErrorName() string { return "DeleteUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeleteUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserReplyValidationError{}

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on GetUserReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetUserReply) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserReplyValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetUserReplyValidationError is the validation error returned by
// GetUserReply.Validate if the designated constraints aren't met.
type GetUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserReplyValidationError) ErrorName() string { return "GetUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserReplyValidationError{}

// Validate checks the field values on GetDeletedUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDeletedUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetDeletedUserRequestValidationError is the validation error returned by
// GetDeletedUserRequest.Validate if the designated constraints aren't met.
type GetDeletedUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeletedUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeletedUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeletedUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeletedUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeletedUserRequestValidationError) ErrorName() string {
	return "GetDeletedUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeletedUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeletedUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeletedUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeletedUserRequestValidationError{}

// Validate checks the field values on GetDeletedUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDeletedUserReply) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDeletedUserReplyValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetDeletedUserReplyValidationError is the validation error returned by
// GetDeletedUserReply.Validate if the designated constraints aren't met.
type GetDeletedUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeletedUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeletedUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeletedUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeletedUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeletedUserReplyValidationError) ErrorName() string {
	return "GetDeletedUserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeletedUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeletedUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeletedUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeletedUserReplyValidationError{}

// Validate checks the field values on ListUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Username

	// no validation rules for Name

	// no validation rules for Contact

	return nil
}

// ListUserRequestValidationError is the validation error returned by
// ListUserRequest.Validate if the designated constraints aren't met.
type ListUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserRequestValidationError) ErrorName() string { return "ListUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserRequestValidationError{}

// Validate checks the field values on ListUserReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ListUserReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserReplyValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListUserReplyValidationError is the validation error returned by
// ListUserReply.Validate if the designated constraints aren't met.
type ListUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserReplyValidationError) ErrorName() string { return "ListUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserReplyValidationError{}

// Validate checks the field values on GetUserByUsernameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserByUsernameRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Username

	return nil
}

// GetUserByUsernameRequestValidationError is the validation error returned by
// GetUserByUsernameRequest.Validate if the designated constraints aren't met.
type GetUserByUsernameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByUsernameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByUsernameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByUsernameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByUsernameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByUsernameRequestValidationError) ErrorName() string {
	return "GetUserByUsernameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByUsernameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByUsernameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByUsernameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByUsernameRequestValidationError{}

// Validate checks the field values on GetUserByUsernameReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserByUsernameReply) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserByUsernameReplyValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetUserByUsernameReplyValidationError is the validation error returned by
// GetUserByUsernameReply.Validate if the designated constraints aren't met.
type GetUserByUsernameReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByUsernameReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByUsernameReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByUsernameReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByUsernameReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByUsernameReplyValidationError) ErrorName() string {
	return "GetUserByUsernameReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByUsernameReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByUsernameReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByUsernameReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByUsernameReplyValidationError{}

// Validate checks the field values on GetStatusRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetStatusRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetStatusRequestValidationError is the validation error returned by
// GetStatusRequest.Validate if the designated constraints aren't met.
type GetStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStatusRequestValidationError) ErrorName() string { return "GetStatusRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStatusRequestValidationError{}

// Validate checks the field values on GetStatusReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetStatusReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetStatus() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetStatusReplyValidationError{
					field:  fmt.Sprintf("Status[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetStatusReplyValidationError is the validation error returned by
// GetStatusReply.Validate if the designated constraints aren't met.
type GetStatusReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStatusReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStatusReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStatusReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStatusReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStatusReplyValidationError) ErrorName() string { return "GetStatusReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetStatusReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStatusReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStatusReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStatusReplyValidationError{}

// Validate checks the field values on DistributeGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DistributeGroupRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DistributeGroupRequestValidationError is the validation error returned by
// DistributeGroupRequest.Validate if the designated constraints aren't met.
type DistributeGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DistributeGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DistributeGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DistributeGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DistributeGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DistributeGroupRequestValidationError) ErrorName() string {
	return "DistributeGroupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DistributeGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDistributeGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DistributeGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DistributeGroupRequestValidationError{}

// Validate checks the field values on DistributeGroupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DistributeGroupReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DistributeGroupReplyValidationError is the validation error returned by
// DistributeGroupReply.Validate if the designated constraints aren't met.
type DistributeGroupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DistributeGroupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DistributeGroupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DistributeGroupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DistributeGroupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DistributeGroupReplyValidationError) ErrorName() string {
	return "DistributeGroupReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DistributeGroupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDistributeGroupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DistributeGroupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DistributeGroupReplyValidationError{}

// Validate checks the field values on GetGroupsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetGroupsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetGroupsRequestValidationError is the validation error returned by
// GetGroupsRequest.Validate if the designated constraints aren't met.
type GetGroupsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupsRequestValidationError) ErrorName() string { return "GetGroupsRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetGroupsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupsRequestValidationError{}

// Validate checks the field values on GetGroupsReply with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetGroupsReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetGroups() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetGroupsReplyValidationError{
					field:  fmt.Sprintf("Groups[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetGroupsReplyValidationError is the validation error returned by
// GetGroupsReply.Validate if the designated constraints aren't met.
type GetGroupsReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupsReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupsReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupsReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupsReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupsReplyValidationError) ErrorName() string { return "GetGroupsReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetGroupsReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupsReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupsReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupsReplyValidationError{}

// Validate checks the field values on CreateUserRequest_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateUserRequest_User) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Name

	// no validation rules for Contact

	// no validation rules for Status

	return nil
}

// CreateUserRequest_UserValidationError is the validation error returned by
// CreateUserRequest_User.Validate if the designated constraints aren't met.
type CreateUserRequest_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateUserRequest_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateUserRequest_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateUserRequest_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateUserRequest_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateUserRequest_UserValidationError) ErrorName() string {
	return "CreateUserRequest_UserValidationError"
}

// Error satisfies the builtin error interface
func (e CreateUserRequest_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateUserRequest_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateUserRequest_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateUserRequest_UserValidationError{}

// Validate checks the field values on UpdateUserRequest_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateUserRequest_User) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Username

	// no validation rules for Name

	// no validation rules for Contact

	return nil
}

// UpdateUserRequest_UserValidationError is the validation error returned by
// UpdateUserRequest_User.Validate if the designated constraints aren't met.
type UpdateUserRequest_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRequest_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRequest_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRequest_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRequest_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRequest_UserValidationError) ErrorName() string {
	return "UpdateUserRequest_UserValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRequest_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRequest_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRequest_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRequest_UserValidationError{}

// Validate checks the field values on GetUserReply_User with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetUserReply_User) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Name

	// no validation rules for Contact

	// no validation rules for Status

	return nil
}

// GetUserReply_UserValidationError is the validation error returned by
// GetUserReply_User.Validate if the designated constraints aren't met.
type GetUserReply_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserReply_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserReply_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserReply_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserReply_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserReply_UserValidationError) ErrorName() string {
	return "GetUserReply_UserValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserReply_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserReply_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserReply_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserReply_UserValidationError{}

// Validate checks the field values on GetDeletedUserReply_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDeletedUserReply_User) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Name

	// no validation rules for Contact

	// no validation rules for Status

	return nil
}

// GetDeletedUserReply_UserValidationError is the validation error returned by
// GetDeletedUserReply_User.Validate if the designated constraints aren't met.
type GetDeletedUserReply_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDeletedUserReply_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDeletedUserReply_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDeletedUserReply_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDeletedUserReply_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDeletedUserReply_UserValidationError) ErrorName() string {
	return "GetDeletedUserReply_UserValidationError"
}

// Error satisfies the builtin error interface
func (e GetDeletedUserReply_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDeletedUserReply_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDeletedUserReply_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDeletedUserReply_UserValidationError{}

// Validate checks the field values on ListUserReply_User with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListUserReply_User) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Name

	// no validation rules for Contact

	// no validation rules for Status

	return nil
}

// ListUserReply_UserValidationError is the validation error returned by
// ListUserReply_User.Validate if the designated constraints aren't met.
type ListUserReply_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserReply_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserReply_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserReply_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserReply_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserReply_UserValidationError) ErrorName() string {
	return "ListUserReply_UserValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserReply_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserReply_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserReply_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserReply_UserValidationError{}

// Validate checks the field values on GetUserByUsernameReply_User with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserByUsernameReply_User) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Name

	// no validation rules for Contact

	// no validation rules for Status

	return nil
}

// GetUserByUsernameReply_UserValidationError is the validation error returned
// by GetUserByUsernameReply_User.Validate if the designated constraints
// aren't met.
type GetUserByUsernameReply_UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByUsernameReply_UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByUsernameReply_UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByUsernameReply_UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByUsernameReply_UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByUsernameReply_UserValidationError) ErrorName() string {
	return "GetUserByUsernameReply_UserValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByUsernameReply_UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByUsernameReply_User.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByUsernameReply_UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByUsernameReply_UserValidationError{}

// Validate checks the field values on GetStatusReply_Status with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetStatusReply_Status) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	return nil
}

// GetStatusReply_StatusValidationError is the validation error returned by
// GetStatusReply_Status.Validate if the designated constraints aren't met.
type GetStatusReply_StatusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetStatusReply_StatusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetStatusReply_StatusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetStatusReply_StatusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetStatusReply_StatusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetStatusReply_StatusValidationError) ErrorName() string {
	return "GetStatusReply_StatusValidationError"
}

// Error satisfies the builtin error interface
func (e GetStatusReply_StatusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetStatusReply_Status.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetStatusReply_StatusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetStatusReply_StatusValidationError{}

// Validate checks the field values on GetGroupsReply_Group with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetGroupsReply_Group) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	return nil
}

// GetGroupsReply_GroupValidationError is the validation error returned by
// GetGroupsReply_Group.Validate if the designated constraints aren't met.
type GetGroupsReply_GroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGroupsReply_GroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGroupsReply_GroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGroupsReply_GroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGroupsReply_GroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGroupsReply_GroupValidationError) ErrorName() string {
	return "GetGroupsReply_GroupValidationError"
}

// Error satisfies the builtin error interface
func (e GetGroupsReply_GroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGroupsReply_Group.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGroupsReply_GroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGroupsReply_GroupValidationError{}
