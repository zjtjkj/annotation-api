// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.20.0
// source: tag_type/v1/tag_type.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationTagTypeCreateTagType = "/api.tag_type.v1.TagType/CreateTagType"
const OperationTagTypeDeleteTagType = "/api.tag_type.v1.TagType/DeleteTagType"
const OperationTagTypeListTagType = "/api.tag_type.v1.TagType/ListTagType"
const OperationTagTypeUpdateTagType = "/api.tag_type.v1.TagType/UpdateTagType"

type TagTypeHTTPServer interface {
	CreateTagType(context.Context, *CreateTagTypeRequest) (*CreateTagTypeReply, error)
	DeleteTagType(context.Context, *DeleteTagTypeRequest) (*DeleteTagTypeReply, error)
	ListTagType(context.Context, *ListTagTypeRequest) (*ListTagTypeReply, error)
	UpdateTagType(context.Context, *UpdateTagTypeRequest) (*UpdateTagTypeReply, error)
}

func RegisterTagTypeHTTPServer(s *http.Server, srv TagTypeHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/tag/type/create", _TagType_CreateTagType0_HTTP_Handler(srv))
	r.POST("/api/v1/tag/type/update", _TagType_UpdateTagType0_HTTP_Handler(srv))
	r.POST("/api/v1/tag/type/delete", _TagType_DeleteTagType0_HTTP_Handler(srv))
	r.POST("/api/v1/tag/type/list", _TagType_ListTagType0_HTTP_Handler(srv))
}

func _TagType_CreateTagType0_HTTP_Handler(srv TagTypeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateTagTypeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTagTypeCreateTagType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateTagType(ctx, req.(*CreateTagTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateTagTypeReply)
		return ctx.Result(200, reply)
	}
}

func _TagType_UpdateTagType0_HTTP_Handler(srv TagTypeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateTagTypeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTagTypeUpdateTagType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateTagType(ctx, req.(*UpdateTagTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateTagTypeReply)
		return ctx.Result(200, reply)
	}
}

func _TagType_DeleteTagType0_HTTP_Handler(srv TagTypeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteTagTypeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTagTypeDeleteTagType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteTagType(ctx, req.(*DeleteTagTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteTagTypeReply)
		return ctx.Result(200, reply)
	}
}

func _TagType_ListTagType0_HTTP_Handler(srv TagTypeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListTagTypeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTagTypeListTagType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListTagType(ctx, req.(*ListTagTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListTagTypeReply)
		return ctx.Result(200, reply)
	}
}

type TagTypeHTTPClient interface {
	CreateTagType(ctx context.Context, req *CreateTagTypeRequest, opts ...http.CallOption) (rsp *CreateTagTypeReply, err error)
	DeleteTagType(ctx context.Context, req *DeleteTagTypeRequest, opts ...http.CallOption) (rsp *DeleteTagTypeReply, err error)
	ListTagType(ctx context.Context, req *ListTagTypeRequest, opts ...http.CallOption) (rsp *ListTagTypeReply, err error)
	UpdateTagType(ctx context.Context, req *UpdateTagTypeRequest, opts ...http.CallOption) (rsp *UpdateTagTypeReply, err error)
}

type TagTypeHTTPClientImpl struct {
	cc *http.Client
}

func NewTagTypeHTTPClient(client *http.Client) TagTypeHTTPClient {
	return &TagTypeHTTPClientImpl{client}
}

func (c *TagTypeHTTPClientImpl) CreateTagType(ctx context.Context, in *CreateTagTypeRequest, opts ...http.CallOption) (*CreateTagTypeReply, error) {
	var out CreateTagTypeReply
	pattern := "/api/v1/tag/type/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTagTypeCreateTagType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TagTypeHTTPClientImpl) DeleteTagType(ctx context.Context, in *DeleteTagTypeRequest, opts ...http.CallOption) (*DeleteTagTypeReply, error) {
	var out DeleteTagTypeReply
	pattern := "/api/v1/tag/type/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTagTypeDeleteTagType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TagTypeHTTPClientImpl) ListTagType(ctx context.Context, in *ListTagTypeRequest, opts ...http.CallOption) (*ListTagTypeReply, error) {
	var out ListTagTypeReply
	pattern := "/api/v1/tag/type/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTagTypeListTagType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *TagTypeHTTPClientImpl) UpdateTagType(ctx context.Context, in *UpdateTagTypeRequest, opts ...http.CallOption) (*UpdateTagTypeReply, error) {
	var out UpdateTagTypeReply
	pattern := "/api/v1/tag/type/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTagTypeUpdateTagType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
