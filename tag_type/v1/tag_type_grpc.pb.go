// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: tag_type/v1/tag_type.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TagTypeClient is the client API for TagType service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TagTypeClient interface {
	CreateTagType(ctx context.Context, in *CreateTagTypeRequest, opts ...grpc.CallOption) (*CreateTagTypeReply, error)
	UpdateTagType(ctx context.Context, in *UpdateTagTypeRequest, opts ...grpc.CallOption) (*UpdateTagTypeReply, error)
	DeleteTagType(ctx context.Context, in *DeleteTagTypeRequest, opts ...grpc.CallOption) (*DeleteTagTypeReply, error)
	ListTagType(ctx context.Context, in *ListTagTypeRequest, opts ...grpc.CallOption) (*ListTagTypeReply, error)
}

type tagTypeClient struct {
	cc grpc.ClientConnInterface
}

func NewTagTypeClient(cc grpc.ClientConnInterface) TagTypeClient {
	return &tagTypeClient{cc}
}

func (c *tagTypeClient) CreateTagType(ctx context.Context, in *CreateTagTypeRequest, opts ...grpc.CallOption) (*CreateTagTypeReply, error) {
	out := new(CreateTagTypeReply)
	err := c.cc.Invoke(ctx, "/api.tag_type.v1.TagType/CreateTagType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagTypeClient) UpdateTagType(ctx context.Context, in *UpdateTagTypeRequest, opts ...grpc.CallOption) (*UpdateTagTypeReply, error) {
	out := new(UpdateTagTypeReply)
	err := c.cc.Invoke(ctx, "/api.tag_type.v1.TagType/UpdateTagType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagTypeClient) DeleteTagType(ctx context.Context, in *DeleteTagTypeRequest, opts ...grpc.CallOption) (*DeleteTagTypeReply, error) {
	out := new(DeleteTagTypeReply)
	err := c.cc.Invoke(ctx, "/api.tag_type.v1.TagType/DeleteTagType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagTypeClient) ListTagType(ctx context.Context, in *ListTagTypeRequest, opts ...grpc.CallOption) (*ListTagTypeReply, error) {
	out := new(ListTagTypeReply)
	err := c.cc.Invoke(ctx, "/api.tag_type.v1.TagType/ListTagType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TagTypeServer is the server API for TagType service.
// All implementations must embed UnimplementedTagTypeServer
// for forward compatibility
type TagTypeServer interface {
	CreateTagType(context.Context, *CreateTagTypeRequest) (*CreateTagTypeReply, error)
	UpdateTagType(context.Context, *UpdateTagTypeRequest) (*UpdateTagTypeReply, error)
	DeleteTagType(context.Context, *DeleteTagTypeRequest) (*DeleteTagTypeReply, error)
	ListTagType(context.Context, *ListTagTypeRequest) (*ListTagTypeReply, error)
	mustEmbedUnimplementedTagTypeServer()
}

// UnimplementedTagTypeServer must be embedded to have forward compatible implementations.
type UnimplementedTagTypeServer struct {
}

func (UnimplementedTagTypeServer) CreateTagType(context.Context, *CreateTagTypeRequest) (*CreateTagTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTagType not implemented")
}
func (UnimplementedTagTypeServer) UpdateTagType(context.Context, *UpdateTagTypeRequest) (*UpdateTagTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTagType not implemented")
}
func (UnimplementedTagTypeServer) DeleteTagType(context.Context, *DeleteTagTypeRequest) (*DeleteTagTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTagType not implemented")
}
func (UnimplementedTagTypeServer) ListTagType(context.Context, *ListTagTypeRequest) (*ListTagTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTagType not implemented")
}
func (UnimplementedTagTypeServer) mustEmbedUnimplementedTagTypeServer() {}

// UnsafeTagTypeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TagTypeServer will
// result in compilation errors.
type UnsafeTagTypeServer interface {
	mustEmbedUnimplementedTagTypeServer()
}

func RegisterTagTypeServer(s grpc.ServiceRegistrar, srv TagTypeServer) {
	s.RegisterService(&TagType_ServiceDesc, srv)
}

func _TagType_CreateTagType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagTypeServer).CreateTagType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.tag_type.v1.TagType/CreateTagType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagTypeServer).CreateTagType(ctx, req.(*CreateTagTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagType_UpdateTagType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagTypeServer).UpdateTagType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.tag_type.v1.TagType/UpdateTagType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagTypeServer).UpdateTagType(ctx, req.(*UpdateTagTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagType_DeleteTagType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTagTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagTypeServer).DeleteTagType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.tag_type.v1.TagType/DeleteTagType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagTypeServer).DeleteTagType(ctx, req.(*DeleteTagTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TagType_ListTagType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTagTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagTypeServer).ListTagType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.tag_type.v1.TagType/ListTagType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagTypeServer).ListTagType(ctx, req.(*ListTagTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TagType_ServiceDesc is the grpc.ServiceDesc for TagType service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TagType_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.tag_type.v1.TagType",
	HandlerType: (*TagTypeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTagType",
			Handler:    _TagType_CreateTagType_Handler,
		},
		{
			MethodName: "UpdateTagType",
			Handler:    _TagType_UpdateTagType_Handler,
		},
		{
			MethodName: "DeleteTagType",
			Handler:    _TagType_DeleteTagType_Handler,
		},
		{
			MethodName: "ListTagType",
			Handler:    _TagType_ListTagType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tag_type/v1/tag_type.proto",
}
